@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web

@inject NavigationManager NavigationManager

<Router AppAssembly="@typeof(Program).Assembly">
    <Found Context="routeData">
        <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(Layout.MainLayout)">
            <NotAuthorized>
                @if (context.User.Identity?.IsAuthenticated != true)
                {
                    <text>Redirecting to login...</text>
                    @{
                        NavigationManager.NavigateTo("/login", true);
                    }
                }
                else
                {
                    <div class="alert alert-danger m-4">
                        <h3>Access Denied</h3>
                        <p>You are not authorized to access this resource.</p>
                    </div>
                }
            </NotAuthorized>
        </AuthorizeRouteView>
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(Layout.MainLayout)">
            <div class="container mt-5">
                <div class="alert alert-warning">
                    <h3>Page Not Found</h3>
                    <p>Sorry, there's nothing at this address.</p>
                    <a href="/" class="btn btn-primary">Go to Home</a>
                </div>
            </div>
        </LayoutView>
    </NotFound>
</Router>

@code {
    [CascadingParameter] private Task<AuthenticationState>? authenticationState { get; set; }
}
